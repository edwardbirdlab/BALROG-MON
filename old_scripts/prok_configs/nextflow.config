params {
    /* Input and output options */
    reads = "data/*{1,2}.fastq.gz"     // input reads (FASTA/FASTQ, gzip and bzip2 compressed files also supported)
    outdir = "./results"               // output directory
    viralverify_db = "none"            // ViralVerify HMM db. 'none': download from Internet
                                       // (used if run_plasmidspades=true)
    single_end = false                 // true if the input reads are single-end
    interleaved = false                // true if the input paired-end reads are interleaved in a single file
    save_clean = false                 // export cleaned reads in the 'clean_reads' directory
    save_spades_output = false         // export the complete output of SPAdes and plasmidSPAdes 

    /* Cleaning options*/
    skip_cleaning = false              // skip read cleaning

    /* Assembly options */
    skip_spades = false                // skip SPAdes assembly (e.g. if you want to run plasmidSPAdes only) 
    run_plasmidspades = false          // run plasmidSPAdes and ViralVerify
    spades_k = "default"               // set SPAdes k-mer lengths manually (e.g. "21,33,55,77" for 2x150bp) 
    
    /* Limits */
    max_cpus = 8
    max_memory = 128.GB
    max_time = 12.h
}    


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Draft prokaryotic genomes from Illumina reads'
    mainScript = 'main.nf'
    version = '2.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}

/*
This File contains parameters that can be changed to configure the pipeline
*/

// Max resource options
// Defaults only, expecting to be overwritten
params.max_memory                 = '100.GB'
params.max_cpus                   = 16
params.max_time                   = '24.h'

// Required Pipeline Config Settings
params.sample_sheet = '/bulk/ksilver/data/Dana_SR_Metagenome_Testing/samplesheet_subset.csv'
params.project_name = 'BALROG_MON_RUN_1'
params.workflow_opt = 'shortread_meta' // (shortread_meta, ont_meta, shortread_isolate)
params.sequencing_adapter_type = 'illumina'  // (aviti, illumina, custom)
params.custom_sequencing_adapter_r1 = '' // Insert R1 sequencing adapter if custom was chosen
params.custom_sequencing_adapter_r1 = '' // Insert R2 sequencing adapter if custom was chosen

/* Other program Settings */
params.fastp_q = '25'  // Average Q score for fastp
params.plasmer_min_len = '500'           //==  Setting the minimum size to be classified in plasmer (defualt/recommended = 500)
params.plasmer_max_len = '500000'        //==  Setting the length at which all contigs greater than this size are automatically considered chromomosomal in orgin (defualt = 500000)

/* Short Read Isolate specific settings */
params.busco_lineage = 'bacteria_odb10'

/*
Database Settings (True = autodownload, False = supplied in corresponding folder)
*/

params.database_dir = ''

//Plasmer (recommend autodownload)
params.db_plasmer = true

//Busco (recommend autodownload)
params.db_buscov5 = true

//Kracken2 (recommend autodownload) If different database is used change RAM requirements as needed in config
params.db_kraken2 = true

//ViralVerify_pfam_db (Can be updated for more up to date plasmid searching, dependent on use)
params.db_viralverify = true

//GTDBtk (Can be updated for more up to date genome identification)
params.db_gtdbtk = true

//ViralVerify_pfam_db (Can be updated for more up to date plasmid searching, dependent on use)
params.db_ncbi16S = true

//resfinder (Reccomend updating for most up to date ARGs)
params.db_resfinder = true

//amrfinder (Reccomend updating for most up to date ARGs)
params.db_amrfinder = true

//argannot (Reccomend updating for most up to date ARGs)
params.db_argannot = true

//card (Reccomend updating for most up to date ARGs)
params.db_card = true

//megares (Reccomend updating for most up to date ARGs)
params.db_megares = true

//Kracken2 PlusPF for metagenomic community anlysis (recommend autodownload) If different database is used change RAM requirements as needed in config
params.db_kraken2_pluspf = true

//Kracken2 PlusPF for metagenomic community anlysis (recommend autodownload) If different database is used change RAM requirements as needed in config
params.db_virsorter = true

//Krackenuniq database for pathogen detection anlysis (recommend autodownload) If different database is used change RAM requirements as needed in config
params.db_krakenuniq = true



/*
Which Path to take (read options carefully):
*/

//Perform metagenomic assembly on ONT reads == True, Convert reads to Fasta without Assembly == False
params.ont_metagenomic_assembly = false



/*
Optional Steps Settings (True = Run Aditional Step, False = Don't run it):
*/

//Preform metagenomic community analysis against GTDB with Sylph (Uses metaphlan scripts for analsysis)
params.meta_community_analysis =true

//Preform extra taxonomic classification (Kraken2 & GTDB) of sequences (Metagenome Recommend, but can be used on Fq2Fa samples as well) 
params.meta_sequence_id = false

//Preform CARD database only annotation. If this is true multi_amr should be false.
params.card_only = false

//Preform multi amr database annoation (AMRFINDERPLUS,Resfinder,CARD). If this is true card_only should be false
params.multi_amr = true

//Preform mobile element finder, will also look to see if any AMR genes happend to be on mobile elements (plasmer already does plasmid, and is run by defualt.
//This should be used if you are intrested in other ME types)
params.mef = true

//Preform proka - metagenome annotator. Will annotate out any genes from the metagenome. This pipeline will not summarize these findings in any way
params.proka = true

//Preform pathogen detection - kraken2 will be run to look for pathogens in host-depleted reads
params.pathogen_detection = true

// Load base.config by default for all pipelines
includeConfig 'configs/base_config.cfg'



// Setting sequencing adapters based on previous settings

if (params.sequencing_adapter_type == 'aviti') {

    params.fastp_adap1 = 'ATGTCGGAAGGTGTGCAGGCTACCGCTTGTCAACT'
    params.fastp_adap2 = 'ATGTCGGAAGGTGTCTGGTGAGCCAATCCAGCACG'

    }

if (params.sequencing_adapter_type == 'custom') {

    params.fastp_adap1 = params.custom_sequencing_adapter_r1
    params.fastp_adap2 = params.custom_sequencing_adapter_r2
    
    }


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
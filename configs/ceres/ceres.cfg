// Profile config names for nf-core/configs
params {
    config_profile_description = 'Ceres - USDA ARS'
    config_profile_contact = 'David Molik'
    config_profile_url = 'https://github.com/edwardbirdlab'
    priority = null
    clusterOptions='-N 1'
    schema_ignore_params = "clusterOptions"
    validationSchemaIgnoreParams = "clusterOptions,schema_ignore_params"
}
 
apptainer {
    enabled = true
}
 
params {
    max_memory = 384.GB
    max_cpus   = 36
    max_time   = 504.h
}
 
process {
    executor = 'slurm'
    clusterOptions = { "${params.clusterOptions ?: ''}" }
    queue = 'short'
    errorStrategy = { sleep(200); return 'retry' }
    maxRetries = 2

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    withLabel: ultralow {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = 2.h
        queue  = 'brief-low'
    }

    withLabel: verylow {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = 2.h
        queue  = 'brief-low'
    }

    withLabel: lowmem {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = 48.h
        queue  = 'short'
    }

    withLabel: lowmemnk {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = 2.h
        queue  = 'mem-low'
    }

    withLabel: lowmemlong {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = 504.h
        queue  = 'long'
    }

    withLabel: kracken2 {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

    withLabel: krackenuniq {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

    withLabel: kracken2_PlusPF {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 80.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'mem'
    }

    withLabel: plasmer {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'mem'
    }


    withLabel: sylph_profile {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }


    withLabel: midmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

    withLabel: midmemlong {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

    withLabel: samtoolssort {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

    withLabel: porechop {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'medium'
    }

     withLabel: medmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'mem'
    }

     withLabel: bigmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 384.GB * task.attempt, 'memory'  ) }
        time   = 168.h
        queue  = 'mem'
    }

     withLabel: small {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = 48.h
        queue  = 'short'
    }
}
 
profiles {
    killable {
        params {
            clusterOptions = null
        }
    }
 
    non_killable {
        params {
            clusterOptions = "--gres=killable:0"
            max_memory = 100.GB
            max_cpus   = 16
            max_time   = 24.h
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

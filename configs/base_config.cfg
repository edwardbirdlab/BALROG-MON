process {
    
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    withLabel: ultralow {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }

    withLabel: verylow {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }

    withLabel: lowmem {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }

    withLabel: lowmemnk {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }

    withLabel: lowmemlong {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }

    withLabel: kracken2 {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withLabel: krackenuniq {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withLabel: kracken2_PlusPF {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 80.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withLabel: plasmer {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h  * task.attempt, 'time'    ) }
    }


    withLabel: sylph_profile {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }


    withLabel: midmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h  * task.attempt, 'time'    ) }
    }

    withLabel: midmemshort {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 3.h  * task.attempt, 'time'    ) }
    }


    withLabel: midmemlong {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withLabel: samtoolssort {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h  * task.attempt, 'time'    ) }
    }

    withLabel: porechop {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

     withLabel: medmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

     withLabel: bigmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 384.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

     withLabel: small {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

}



if (params.publish_dir_mode == 'defualt') {
     process {
            publishDir = [
                path: { "${params.project_name}/${task.process.tokenize(':').join('/')}" }
            ]
        } 
    } else {
        process {
            publishDir = [
                path: { "${params.project_name}/${task.process.tokenize(':').join('/')}" },
                mode: params.publish_dir_mode
            ]
        }
    }
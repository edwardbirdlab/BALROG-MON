// Profile config names for nf-core/configs
params {
    config_profile_description = 'Ceres - USDA ARS'
    config_profile_contact = 'David Molik'
    config_profile_url = 'https://github.com/edwardbirdlab'
    priority = null
    clusterOptions='-N 1'
    schema_ignore_params = "clusterOptions"
    validationSchemaIgnoreParams = "clusterOptions,schema_ignore_params"
}
 
singularity {
    enabled = true
}
 
params {
    max_memory = 384.GB
    max_cpus   = 36
    max_time   = 240.h
}
 
process {
    executor = 'slurm'
    clusterOptions = { "${params.clusterOptions ?: ''}" }
    queue = 'short'
    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    maxRetries 2

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    withLabel: ultralow {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
        queue  = 'brief-low'
    }

    withLabel: verylow {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
        queue  = 'brief-low'
    }

    withLabel: lowmem {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
        queue  = 'short'
    }

    withLabel: lowmemnk {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
        queue  = 'mem-low'
    }

    withLabel: lowmemlong {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
        queue  = 'long'
    }

    withLabel: kracken2 {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

    withLabel: krackenuniq {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

    withLabel: kracken2_PlusPF {   
        cpus   = { check_max( 8                  , 'cpus'    ) }
        memory = { check_max( 80.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        queue  = 'mem'
    }

    withLabel: plasmer {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 5.h  * task.attempt, 'time'    ) }
        queue  = 'mem'
    }


    withLabel: sylph_profile {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }


    withLabel: midmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

    withLabel: midmemlong {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

    withLabel: samtoolssort {   
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

    withLabel: porechop {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        queue  = 'medium'
    }

     withLabel: medmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        queue  = 'mem'
    }

     withLabel: bigmem {   
        cpus   = { check_max( 16                  , 'cpus'    ) }
        memory = { check_max( 384.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        queue  = 'mem'
    }

     withLabel: small {   
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { cheock_max( 12.h  * task.attempt, 'time'    ) }
        queue  = 'short'
    }
}
 
profiles {
    killable {
        params {
            clusterOptions = null
        }
    }
 
    non_killable {
        params {
            clusterOptions = "--gres=killable:0"
            max_memory = 100.GB
            max_cpus   = 16
            max_time   = 24.h
        }
    }
}
